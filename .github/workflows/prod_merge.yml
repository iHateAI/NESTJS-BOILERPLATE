# name: Deploy

# env:
#   DOCKER_CONTAINER_NAME_NO_1: container_name_1
#   DOCKER_CONTAINER_NAME_NO_2: container_name_2
#   DOCKER_IMAGE_NAME: application_image_name
#   DOCKER_HUB_NAME: hhs7425

# on:
#   push:
#     branches: ["main"]

# jobs:

#   build:
#     runs-on: ubuntu-20.04
#     steps:
#     - name: Checkout Source Code
#       uses: actions/checkout@v3
#     - name: Create .env File
#       run: |
#         touch .env
#         echo MYSQL_USER=${{ secrets.VOG_NEST_ENV_MYSQL_USER }} >> .env
#         echo MYSQL_HOST=${{ secrets.VOG_NEST_ENV_MYSQL_HOST }} >> .env
#         echo MYSQL_PASSWORD=${{ secrets.VOG_NEST_ENV_MYSQL_PASSWORD }} >> .env
#         echo MYSQL_PORT=${{ secrets.VOG_NEST_ENV_MYSQL_PORT }} >> .env

#         echo REDIS_SESSION_HOST=${{ secrets.VOG_NEST_ENV_REDIS_SESSION_HOST }} >> .env
#         echo REDIS_SESSION_PASSWORD=${{ secrets.VOG_NEST_ENV_REDIS_SESSION_PASSWORD }} >> .env
#         echo REDIS_SESSION_PORT=${{ secrets.VOG_NEST_ENV_REDIS_SESSION_PORT }} >> .env
#     - name: Set up docker build
#       id: buildx
#       uses: docker/setup-buildx-action@v2
#     - name: Login To Docker Hub
#       run: |
#         sudo docker login -u ${{ secrets.DOCKER_HUB_USER }} -p ${{ secrets.DOCKER_HUB_PASSWORD }}
#     - name: Build
#       run: |
#         sudo docker build -t ${{ env.DOCKER_HUB_NAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest .
#         ls -al
#     - name: Push
#       run: |
#         sudo docker push ${{ env.DOCKER_HUB_NAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest

#   deploy:
#     needs: build
#     runs-on: [self-hosted, label-vog ]
#     steps:
#     - name: Login To Docker Hub
#       run: |
#         sudo docker login -u ${{ secrets.DOCKER_HUB_USER }} -p ${{ secrets.DOCKER_HUB_PASSWORD }}
#     - name: Run docker
#       run: |
#         docker stop ${{ env.DOCKER_CONTAINER_NAME_NO_1 }} && docker rm ${{ env.DOCKER_CONTAINER_NAME_NO_1 }}
#         docker stop ${{ env.DOCKER_CONTAINER_NAME_NO_2 }} && docker rm ${{ env.DOCKER_CONTAINER_NAME_NO_2 }} && docker rmi ${{ env.DOCKER_HUB_NAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest
#         docker pull ${{ env.DOCKER_HUB_NAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest
#         docker run -d -p 3000:3000 --name ${{ env.DOCKER_CONTAINER_NAME_NO_1 }} --restart always ${{ env.DOCKER_HUB_NAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest
#         docker run -d -p 3001:3000 --name ${{ env.DOCKER_CONTAINER_NAME_NO_2 }} --restart always ${{ env.DOCKER_HUB_NAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest
